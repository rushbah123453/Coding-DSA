Types of Design Patterns
There are mainly three types of design patterns:

Creational
These design patterns are all about class instantiation or object creation.
These patterns can be further categorized into Class-creational patterns and object-creational patterns.
While class-creation patterns use inheritance effectively in the instantiation process,
object-creation patterns use delegation effectively to get the job done.
Creational design patterns are the Factory Method, Abstract Factory, Builder, Singleton,
Object Pool, and Prototype.

Use case of creational design pattern-
1) Suppose a developer wants to create a simple DBConnection class to connect to a database
and wants to access the database at multiple locations from code, generally what developer
will do is create an instance of DBConnection class and use it for doing database operations
wherever required

2) Suppose you want to create multiple instances of similar kind and want to achieve loose
coupling then you can go for Factory pattern. A class implementing factory design pattern works
as a bridge between multiple classes. Consider an example of using multiple database servers
like SQL Server and Oracle. If you are developing an application using SQL Server database as back end,
but in future need to change database to oracle, you will need to modify all your code, so as
factory design patterns maintain loose coupling and easy implementation we should go for factory
for achieving loose coupling and creation of similar kind of object.

Structural
These design patterns are about organizing different classes and objects to form larger structures and provide new functionality.
Structural design patterns are Adapter, Bridge, Composite, Decorator, Facade, Flyweight, Private Class Data, and Proxy.

Use Case Of Structural Design Pattern-

1) When 2 interfaces are not compatible with each other and want to establish a relationship
between them through an adapter itâ€™s called an adapter design pattern.

Behavioral
Behavioral patterns are about identifying common communication patterns between objects
and realize these patterns.
Behavioral patterns are Chain of responsibility, Command, Interpreter, Iterator, Mediator,
Memento, Null Object, Observer, State, Strategy, Template method, Visitor

Use Case of Behavioral Design Pattern-

1) Template pattern defines the skeleton of an algorithm in an operation deferring some
steps to sub-classes, Template method lets subclasses redefine certain steps of an algorithm
without changing the algorithm structure