Fail Fast and Fail Safe Iterators in Java

Fail-Fast iterators immediately throw ConcurrentModificationException if there is structural
modification of the collection. Structural modification means adding, removing any element from collection
while a thread is iterating over that collection.
Iterator on ArrayList, HashMap classes are some examples of fail-fast Iterator.

Fail-Safe iterators don’t throw any exceptions if a collection is
structurally modified while iterating over it.
This is because, they operate on the clone of the collection,
not on the original collection and that’s why they are called fail-safe iterators.
Iterator on CopyOnWriteArrayList, ConcurrentHashMap classes are examples of fail-safe Iterator.

How Fail Fast Iterator works ?

To know whether the collection is structurally modified or not,
fail-fast iterators use an internal flag called modCount
which is updated each time a collection is modified.
Fail-fast iterators checks the modCount flag whenever it gets the next value
(i.e. using next() method), and if it finds that the modCount has been modified
after this iterator has been created, it throws ConcurrentModificationException.

