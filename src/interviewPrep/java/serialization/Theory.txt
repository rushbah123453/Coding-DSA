Serialization
It is a mechanism of converting the state of an object into a byte stream.

Deserialization
It is the reverse process where the byte stream is used to recreate the actual Java object in memory.

The byte stream created is platform independent. So, the object serialized on one platform can be deserialized on a different platform.

Only the objects of those classes can be serialized which are implementing java.io.Serializable interface.

Serializable is a marker interface (has no data member and method).
It is used to “mark” java classes so that objects of these classes may get certain capability.
Other examples of marker interfaces are:- Cloneable and Remote.


Points to remember
1. If a parent class has implemented Serializable interface then child class doesn’t need to implement it but vice-versa is not true.
2. Only non-static data members are saved via Serialization process.
3. Static data members and transient data members are not saved via Serialization process.
    So, if you don’t want to save value of a non-static data member then make it transient.
    (transient is a variables modifier used in serialization. At the time of serialization,
    if we don’t want to save value of a particular variable in a file, then we use transient keyword eg. private transient String password;)
4. Constructor of object is never called when an object is deserialized.
5. Associated objects must be implementing Serializable interface.



