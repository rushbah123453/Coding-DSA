Stability of sorting algo:

1) An algo is said to be stable if for same elements the order is maintained as in original array.

Example: Let A be an array, and let < be a strict weak ordering on the elements of A.
A sorting algorithm is stable if-
i < j and A[i] === A[j] implies pi (i) < pi (j)
where pi is the sorting permutation ( sorting moves A[i] to position pi(i) )
Informally, stability means that equivalent elements retain their relative positions, after sorting.

2) Do we care for simple arrays like array of integers?
When equal elements are indistinguishable, such as with integers, or more generally,
any data where the entire element is the key, stability is not an issue.
Stability is also not an issue if all keys are different.

3) Which sorting algorithms are stable?
Some Sorting Algorithms are stable by nature, such as Bubble Sort, Insertion Sort,
Merge Sort, Count Sort etc.

4) Which sorting algorithms are unstable?
Quick Sort, Heap Sort etc., can be made stable by also taking the position of the elements into
consideration. This change may be done in a way which does not compromise a
lot on the performance and takes some extra space, possibly theta(n).

5) Can we make any sorting algorithm stable?
Any given sorting algo which is not stable can be modified to be stable.
There can be sorting algo specific ways to make it stable, but in general,
any comparison based sorting algorithm which is not stable by nature can be modified
to be stable by changing the key comparison operation so that the comparison of
two keys considers position as a factor for objects with equal keys.
